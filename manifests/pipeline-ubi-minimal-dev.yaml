
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: nginx-ubi-min-dev-pipeline
  namespace: nginx
spec:
  params:
    - default: 'https://github.com/davtur/nginx-hello-world.git'
      description: The application git repository
      name: APP_SOURCE_GIT
      type: string
    - default: main
      description: The application git revision
      name: APP_SOURCE_REVISION
      type: string
    - default: main
      description: The application git revision
      name: APP_MANIFESTS_REVISION
      type: string
    - default: 'https://github.com/davtur/nginx-hello-world.git'
      description: The application manifests git repository
      name: APP_MANIFESTS_GIT
      type: string
    - default: latest
      description: The application image tag to build
      name: APP_IMAGE_TAG
      type: string
    - default: nginx
      description: The namespace for Stage environments
      name: DEV_NAMESPACE
      type: string
    - default: 'ghttps://github.com/davtur/nginx-hello-world.git'
      description: The application test cases git repository
      name: APP_TESTS_GIT
      type: string
    - default: nginx:latest
      name: VERSION
      type: string

    - default: 'image-registry.openshift-image-registry.svc:5000/nginx/app'
      name: IMAGE_NAME
      type: string
  tasks:
    - name: source-clone
      params:
        - name: url
          value: $(params.APP_SOURCE_GIT)
        - name: revision
          value: $(params.APP_SOURCE_REVISION)
        - name: depth
          value: '0'
        - name: subdirectory
          value: nginx
        - name: deleteExisting
          value: 'true'
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: manifests-source-clone
      params:
        - name: url
          value: $(params.APP_MANIFESTS_GIT)
        - name: revision
          value: $(params.APP_MANIFESTS_REVISION)
        - name: depth
          value: '0'
        - name: subdirectory
          value: manifests
        - name: deleteExisting
          value: 'true'
      runAfter:
        - build-image
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    

    - name: build-image
      params:
        - name: TLSVERIFY
          value: 'false'
        - name: PATH_CONTEXT
          value: ./nginx
        - name: CONTEXT
          value: ./nginx
        - name: IMAGE
          value: 'image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/app:$(params.APP_IMAGE_TAG)'
        - name: VERSION
          value: $(params.VERSION)
        - name: DOCKERFILE
          value: '/workspace/dockerfile/Dockerfile'
      runAfter:
        - source-clone
      taskRef:
        kind: Task
        name: buildah
      workspaces:
        - name: source
          workspace: workspace
        - name: dockerfile
          workspace: dockerfile
    - name: image-scan
      params:
        - name: image
          value: >-
            image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/app
        - name: rox_api_token
          value: roxsecrets
        - name: rox_central_endpoint
          value: roxsecrets
        - name: output_format
          value: table
        - name: image_digest
          value: $(tasks.build-image.results.IMAGE_DIGEST)
      runAfter:
        - build-image
      taskRef:
        kind: ClusterTask
        name: rox-image-scan
    - name: image-check
      params:
        - name: image
          value: >-
            image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/app
        - name: rox_api_token
          value: roxsecrets
        - name: rox_central_endpoint
          value: roxsecrets
        - name: image_digest
          value: $(tasks.build-image.results.IMAGE_DIGEST)
      runAfter:
        - build-image
      taskRef:
        kind: ClusterTask
        name: rox-image-check
    - name: deploy-check
      params:
        - name: GIT_REPOSITORY
          value: $(params.APP_MANIFESTS_GIT)
        - name: rox_api_token
          value: roxsecrets
        - name: rox_central_endpoint
          value: roxsecrets
        - name: file
          value: deployment.yaml
        - name: deployment_files_path
          value: manifests
      runAfter:
        - manifests-source-clone
      taskRef:
        kind: Task
        name: rox-deployment-policy-check
      workspaces:
        - name: workspace
          workspace: workspace


  workspaces:
    - name: workspace
    - name: dockerfile
